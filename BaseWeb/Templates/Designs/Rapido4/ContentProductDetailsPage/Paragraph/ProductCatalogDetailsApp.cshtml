@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.ParagraphViewModel>
@using System.Web
@using Dynamicweb.Ecommerce.ProductCatalog

@{ 
    bool isVisualEditor = !string.IsNullOrEmpty(HttpContext.Current.Request.QueryString.Get("VisualEdit")) ? Convert.ToBoolean(HttpContext.Current.Request.QueryString.Get("VisualEdit")) : false;

    //Set default product data
    ProductViewModelSettings productSetting = new ProductViewModelSettings {
        LanguageId = Dynamicweb.Ecommerce.Common.Context.LanguageID,
        CurrencyCode = Dynamicweb.Ecommerce.Common.Context.Currency.Code,
        CountryCode = Dynamicweb.Ecommerce.Common.Context.Country.Code2,
        ShopId = Pageview.Area.EcomShopId
    };

    string selectedDummyProduct = "PROD5";
    var list = Model.Item.GetValue("DummyProduct") as ProductListViewModel;

    foreach(var product in list.Products) {
        selectedDummyProduct = product.Id;
    }

    ProductViewModel dummyProduct = ViewModelFactory.CreateView(productSetting, selectedDummyProduct);

    if (!System.Web.HttpContext.Current.Items.Contains("ProductDetails"))
    {
        System.Web.HttpContext.Current.Items.Add("ProductDetails", dummyProduct);
    }
}

@if (isVisualEditor) {
    <div class="alert alert-info" role="alert">
        <span><i class="fas fa-exclamation-triangle mr-3"></i></span> <span>@Translate("Product catalog App: Edit this column to configure. (Product catalog app must be attached this paragraph)")</span>
    </div>
}

<div>
    @Model.GetModuleOutput()
</div>
