@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.GridRowViewModel>
@using Dynamicweb.Frontend
@using Dynamicweb.Content
@using Dynamicweb.Content.Items
@using Dynamicweb
@using System.Web


@Include("ColumnBase.cshtml")

@functions {
    public string GenerateRgba(string color, string opacity)
    {
        color = color.Replace("#", "");
        if (color.Length == 6) {
            return "rgba(" + Convert.ToInt32(color.Substring(0, 2), 16) + ", " + Convert.ToInt32(color.Substring(2, 2), 16) + ", " + Convert.ToInt32(color.Substring(4, 2), 16) + ", " + opacity + ");";
        } else {
            return Convert.ToInt16(color).ToString();
        }
    }
}

@{ 
    bool isVisualEditor = !string.IsNullOrEmpty(HttpContext.Current.Request.QueryString.Get("VisualEdit")) ? Convert.ToBoolean(HttpContext.Current.Request.QueryString.Get("VisualEdit")) : false;

    var colorService = new ColorSwatchService();
    string containerLayout = Model.Item.GetList("Width").SelectedValue  != "stretch" ? "container" : "container-fluid"; 
    string height = Model.Item.GetList("Height") != null ? "row-height-" + Model.Item.GetList("Height").SelectedValue : "";
    string spacing;
    
    if (Model.Item.GetList("SpacingPosition").SelectedValue != "top-bottom") {
        spacing = "p" + Model.Item.GetList("SpacingPosition").SelectedValue + "-" + Model.Item.GetList("Spacing").SelectedValue;
    } else {
        spacing = "py-" + Model.Item.GetList("Spacing").SelectedValue;
    }

    string columnGap = Model.Item.GetList("ColumnGap") != null ? "gx-" + Model.Item.GetList("ColumnGap").SelectedValue : "gx-sm";
    string backgroundColor = !string.IsNullOrWhiteSpace(Model.Item.GetString("BackgroundColor")) && Model.Item.GetString("BackgroundColor") != "transparent" ? Model.Item.GetString("BackgroundColor") : "";
    if (Model.Item.GetString("BackgroundColor") != "transparent") {
        backgroundColor = !backgroundColor.Contains("#") ? "style=\"background-color: " + colorService.GetHexColor(Pageview.AreaID, backgroundColor) + "\"" : "style=\"background-color: " + backgroundColor + "\"";
    }

    int columnSize = 12 / Model.Columns.Count();

    bool contentFound = false;
    foreach (var column in Model.Columns) {
        if (!string.IsNullOrEmpty(column.Output())) {
            contentFound = true;
        }
    }
}

@if (contentFound == true) {
    <div class="item-type:@Model.Definition.ItemType" @backgroundColor>
        <div class="@containerLayout @spacing @height position-relative">
            @if (!string.IsNullOrEmpty(Model.Item.GetString("Image")))
            {
                int cropMode = 0;
                string imagePath = Model.Item.GetFile("Image") != null ? Model.Item.GetFile("Image").Path : "";
                string image = "/Admin/Public/GetImage.ashx?width=" + 1920 + "&height=" + 845 + "&crop=" + cropMode + "&image=" + imagePath;

                <div class="background-image dw-mod">
                    <div class="background-image__wrapper dw-mod">
                        <img class="b-lazy background-image__cover" src="/Files/Images/placeholder.gif" data-src="@imagePath" />
                    </div> 
                </div>
            }

            <div id="Row-@(Model.Id)">
                @if (Pageview.Device.ToString() != "Mobile") {
                    <ul class="nav nav-tabs" id="Tabs-@(Model.Id)" role="tablist">
                        @{
                            int tabCount = 0;

                            foreach (var column in Model.Columns) {
                                Paragraph paragraph = column.ParagraphId > 0 ? Services.Paragraphs.GetParagraph(column.ParagraphId) : null;

                                string activeTab = tabCount == 0 ? "active" : "";
                                string tabAreaSelected = tabCount == 0 ? "aria-selected=\"true\"" : "";
                                string columnId = column.ParagraphId == 0 ? "T" + Model.Id + "-" + column.ColumnNumber : "T" + Model.Id + "-" + column.ParagraphId;
                                string columnName = Translate("Tab") + " " + column.ColumnNumber;

                                string textColor = "";
                                string tabColor = "";

                                if (paragraph != null) {
                                    textColor = paragraph.Item["TextColor"] != null && paragraph.Item["TextColor"].ToString() != "transparent" ? paragraph.Item["TextColor"].ToString() : "";
                                    if (textColor != "") {
                                        textColor = !textColor.Contains("#") ? "color: " + colorService.GetHexColor(Pageview.AreaID, textColor) + "; " : "color: " + textColor + "; ";
                                    }

                                    tabColor = paragraph.Item["BackgroundColor"] != null && paragraph.Item["BackgroundColor"].ToString() != "transparent" ? paragraph.Item["BackgroundColor"].ToString() : "";
                                    if (tabColor != "") {
                                        tabColor = !tabColor.Contains("#") ? "background-color: " + colorService.GetHexColor(Pageview.AreaID, tabColor) + "; " + "border-color: " + colorService.GetHexColor(Pageview.AreaID, tabColor) + "; " : "background-color: " + tabColor +  "; " + "border-color: " + tabColor +  "; ";
                                    }

                                    columnName = paragraph.Item["Title"] != null ? paragraph.Item["Title"].ToString() : paragraph.Header;

                                    <style>
                                        #@columnId-tab.active {
                                            @tabColor 
                                            @textColor
                                        }
                                    </style>
                                }

                                if (!string.IsNullOrEmpty(column.Output()) || isVisualEditor) {
                                    <li class="nav-item" role="presentation">
                                        <a class="nav-link @activeTab" id="@columnId-tab" data-toggle="tab" href="#@columnId" role="tab" aria-controls="@columnName" @tabAreaSelected>@columnName</a>
                                    </li>

                                    tabCount++;
                                } 
                            }
                        }
                    </ul>
                    <div class="tab-content" id="myTabContent">
                        @{ 
                            int columnCount = 0;

                            foreach (var column in Model.Columns) {
                                string activeColumn = columnCount == 0 ? "show active" : "";
                                string columnId = column.ParagraphId == 0 ? "T" + Model.Id + "-" + column.ColumnNumber : "T" + Model.Id + "-" + column.ParagraphId;
                        
                                if (!string.IsNullOrEmpty(column.Output()) || isVisualEditor) {
                                    <div class="tab-pane fade @activeColumn" id="@columnId" role="tabpanel" aria-labelledby="@columnId-tab">
                                        <div class="card card-border-top-0 ">
                                            @if (!string.IsNullOrEmpty(column.Output())) {
                                                @RenderColumn(column, 12)
                                            } else if (isVisualEditor) {
                                                Paragraph paragraph = column.ParagraphId > 0 ? Services.Paragraphs.GetParagraph(column.ParagraphId) : null;

                                                <div class="alert alert-dark" role="alert">
                                                    <span><i class="fas fa-info-circle mr-3"></i></span> <span>@paragraph.GetDisplayName()</span>
                                                </div>
                                            }
                                        </div>
                                    </div>

                                    columnCount++;
                                } 
                            }
                        }
                    </div>
                } else {
                    foreach (var column in Model.Columns) {
                        Paragraph paragraph = column.ParagraphId > 0 ? Services.Paragraphs.GetParagraph(column.ParagraphId) : null;
                        string columnName = Translate("Tab") + " " + column.ColumnNumber;

                        if (paragraph != null) {
                            columnName = paragraph.Item["Title"] != null ? paragraph.Item["Title"].ToString() : paragraph.Header;
                        }

                        string columnId = column.ParagraphId == 0 ? "T" + Model.Id + "-" + column.ColumnNumber : "T" + Model.Id + "-" + column.ParagraphId;
                        
                        if (!string.IsNullOrEmpty(column.Output()) || isVisualEditor) {
                            <div class="row" id="@columnId">
                                <div class="col-12">
                                    @if (!string.IsNullOrEmpty(column.Output())) {
                                        <h2>@columnName</h2>
                                        @RenderColumn(column, 12)
                                    } else if (isVisualEditor) {
                                        <div class="alert alert-dark" role="alert">
                                            <span><i class="fas fa-info-circle mr-3"></i></span> <span>@paragraph.GetDisplayName()</span>
                                        </div>
                                    }
                                </div>
                            </div>
                        } 
                    }
                }
            </div>
        </div>
    </div>
}